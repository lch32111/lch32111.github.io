<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://lch32111.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://lch32111.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-24T09:52:21+00:00</updated><id>https://lch32111.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Building GUI from scratch</title><link href="https://lch32111.github.io/blog/2024/Building-GUI-from-scratch/" rel="alternate" type="text/html" title="Building GUI from scratch"/><published>2024-11-23T01:00:00+00:00</published><updated>2024-11-23T01:00:00+00:00</updated><id>https://lch32111.github.io/blog/2024/Building-GUI-from-scratch</id><content type="html" xml:base="https://lch32111.github.io/blog/2024/Building-GUI-from-scratch/"><![CDATA[<p>Here are the slides for Building GUI from scratch that I presented at the Ubisoft La Forge Student session.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s1-480.webp 480w,/assets/img/building_gui_scratch/s1-800.webp 800w,/assets/img/building_gui_scratch/s1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s2-480.webp 480w,/assets/img/building_gui_scratch/s2-800.webp 800w,/assets/img/building_gui_scratch/s2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s3-480.webp 480w,/assets/img/building_gui_scratch/s3-800.webp 800w,/assets/img/building_gui_scratch/s3-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s4-480.webp 480w,/assets/img/building_gui_scratch/s4-800.webp 800w,/assets/img/building_gui_scratch/s4-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s5-480.webp 480w,/assets/img/building_gui_scratch/s5-800.webp 800w,/assets/img/building_gui_scratch/s5-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s6-480.webp 480w,/assets/img/building_gui_scratch/s6-800.webp 800w,/assets/img/building_gui_scratch/s6-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s7-480.webp 480w,/assets/img/building_gui_scratch/s7-800.webp 800w,/assets/img/building_gui_scratch/s7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s8-480.webp 480w,/assets/img/building_gui_scratch/s8-800.webp 800w,/assets/img/building_gui_scratch/s8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s9-480.webp 480w,/assets/img/building_gui_scratch/s9-800.webp 800w,/assets/img/building_gui_scratch/s9-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s9.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s10-480.webp 480w,/assets/img/building_gui_scratch/s10-800.webp 800w,/assets/img/building_gui_scratch/s10-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s10.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s11-480.webp 480w,/assets/img/building_gui_scratch/s11-800.webp 800w,/assets/img/building_gui_scratch/s11-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s11.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s12-480.webp 480w,/assets/img/building_gui_scratch/s12-800.webp 800w,/assets/img/building_gui_scratch/s12-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s13-480.webp 480w,/assets/img/building_gui_scratch/s13-800.webp 800w,/assets/img/building_gui_scratch/s13-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s13.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s14-480.webp 480w,/assets/img/building_gui_scratch/s14-800.webp 800w,/assets/img/building_gui_scratch/s14-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s14.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s15-480.webp 480w,/assets/img/building_gui_scratch/s15-800.webp 800w,/assets/img/building_gui_scratch/s15-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s15.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s16-480.webp 480w,/assets/img/building_gui_scratch/s16-800.webp 800w,/assets/img/building_gui_scratch/s16-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s16.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s17-480.webp 480w,/assets/img/building_gui_scratch/s17-800.webp 800w,/assets/img/building_gui_scratch/s17-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s17.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s18-480.webp 480w,/assets/img/building_gui_scratch/s18-800.webp 800w,/assets/img/building_gui_scratch/s18-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s18.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s19-480.webp 480w,/assets/img/building_gui_scratch/s19-800.webp 800w,/assets/img/building_gui_scratch/s19-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s19.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s20-480.webp 480w,/assets/img/building_gui_scratch/s20-800.webp 800w,/assets/img/building_gui_scratch/s20-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s20.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s21-480.webp 480w,/assets/img/building_gui_scratch/s21-800.webp 800w,/assets/img/building_gui_scratch/s21-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s21.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s22-480.webp 480w,/assets/img/building_gui_scratch/s22-800.webp 800w,/assets/img/building_gui_scratch/s22-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s22.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s23-480.webp 480w,/assets/img/building_gui_scratch/s23-800.webp 800w,/assets/img/building_gui_scratch/s23-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s23.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s24-480.webp 480w,/assets/img/building_gui_scratch/s24-800.webp 800w,/assets/img/building_gui_scratch/s24-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s24.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s25-480.webp 480w,/assets/img/building_gui_scratch/s25-800.webp 800w,/assets/img/building_gui_scratch/s25-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s25.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s26-480.webp 480w,/assets/img/building_gui_scratch/s26-800.webp 800w,/assets/img/building_gui_scratch/s26-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s26.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/building_gui_scratch/s27-480.webp 480w,/assets/img/building_gui_scratch/s27-800.webp 800w,/assets/img/building_gui_scratch/s27-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/building_gui_scratch/s27.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure>]]></content><author><name></name></author><category term="ChLib"/><category term="ChLib,"/><category term="GUI,"/><category term="Font,"/><category term="One-Draw-Call-UI,"/><summary type="html"><![CDATA[From Font Processing to Immediate Mode GUI with one draw call rendering]]></summary></entry><entry><title type="html">ChLib Full Credits</title><link href="https://lch32111.github.io/blog/2024/ChLib-Full-Credits/" rel="alternate" type="text/html" title="ChLib Full Credits"/><published>2024-11-23T00:00:00+00:00</published><updated>2024-11-23T00:00:00+00:00</updated><id>https://lch32111.github.io/blog/2024/ChLib-Full-Credits</id><content type="html" xml:base="https://lch32111.github.io/blog/2024/ChLib-Full-Credits/"><![CDATA[<p>These are the credits of papers, source code, and websites, which help me write my library codes.</p> <h2 id="data-structure">Data Structure</h2> <h5 id="binary-search-tree">Binary Search Tree</h5> <ul> <li>Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. 2009. Introduction to Algorithms, Third Edition (3rd. ed.). The MIT Press.</li> </ul> <h5 id="avl-tree">AVL Tree</h5> <ul> <li>Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. 2009. Introduction to Algorithms, Third Edition (3rd. ed.). The MIT Press.</li> </ul> <h2 id="string">String</h2> <h5 id="utf-8-based-string">UTF-8 based String</h5> <ul> <li>http://utf8everywhere.org/</li> </ul> <h2 id="memory-allocator">Memory Allocator</h2> <h5 id="dynamic-block-allocator">Dynamic Block Allocator</h5> <ul> <li><code class="language-plaintext highlighter-rouge">idBlockAlloc</code> from idSoftware Doom 3 : https://github.com/id-Software/DOOM-3/blob/a9c49da5afb18201d31e3f0a429a037e56ce2b9a/neo/idlib/Heap.h <ul> <li>GPL-3.0 license</li> </ul> </li> </ul> <h3 id="arena-allocator">Arena Allocator</h3> <ul> <li>Arena Allocator by Ryan Fleury : https://www.rfleury.com/p/untangling-lifetimes-the-arena-allocator</li> </ul> <h3 id="buddy-allocator">Buddy Allocator</h3> <ul> <li>Buddy Allcoator by gingerBill : https://www.gingerbill.org/article/2021/12/02/memory-allocation-strategies-006/#fnref:5</li> </ul> <h2 id="hashmap">HashMap</h2> <ul> <li>Robin Hood Hasing by Pedro Celis : https://cs.uwaterloo.ca/research/tr/1986/CS-86-14.pdf</li> <li>Robin Hood Hash Map <ul> <li>Very Fast HashMap in C++ by Martin Leitner-Ankerl (Part 1) : https://martin.ankerl.com/2016/09/15/very-fast-hashmap-in-c-part-1/</li> <li>Very Fast HashMap in C++ by Martin Leitner-Ankerl (Part 2) : https://martin.ankerl.com/2016/09/21/very-fast-hashmap-in-c-part-2/</li> <li>Very Fast HashMap in C++ by Martin Leitner-Ankerl (Part 3) : https://martin.ankerl.com/2016/09/21/very-fast-hashmap-in-c-part-3/</li> </ul> </li> <li>Robin HOOD Hash Map C Implementation by rmind : https://github.com/rmind/rhashmap <ul> <li><a href="###BSD-2 Clause License">BSD-2 Clause License</a></li> </ul> </li> <li>Robin Hood optimized unordered hashmap by Martin Leitner-Ankerl : https://github.com/martinus/unordered_dense/blob/main/include/ankerl/unordered_dense.h <ul> <li>MIT License</li> </ul> </li> </ul> <h2 id="window">Window</h2> <h5 id="chwindow-for-windows-android-linux-mac-and-so-on">ChWindow for windows, android, linux, mac, and so on</h5> <ul> <li>ChWindow library copies the win32 part of the glfw first.</li> <li>GLFW : https://www.glfw.org/</li> <li>SDL : https://www.libsdl.org/</li> </ul> <h2 id="math">Math</h2> <h5 id="conjugate-gradient-method">Conjugate Gradient Method</h5> <ul> <li>Nocedal, J., &amp; Wright, S. J. (2006). <em>Numerical optimization</em> (2nd ed.). Springer.</li> </ul> <h5 id="cholesky-decomposition">Cholesky Decomposition</h5> <ul> <li>Davis, T., Rajamanickam, S., &amp; Sid-Lakhdar, W. (2016). A survey of direct methods for sparse linear systems. <em>Acta Numerica,</em> <em>25</em>, 383-566. doi:10.1017/S0962492916000076</li> <li>Ruschel, João Paulo Tarasconi, Bachelor degree, “Parallel Implementations of the Cholesky Decomposition on CPUs and GPUs” Universidade Federal Do Rio Grande Do Sul, Instituto De Informatica, 2016, pp. 29-30.</li> </ul> <h2 id="random">Random</h2> <h5 id="permuted-congruential-generator">Permuted Congruential Generator</h5> <ul> <li>https://www.pcg-random.org/</li> <li>https://github.com/imneme/pcg-c-basic</li> <li>https://github.com/imneme/pcg-c</li> <li>https://en.wikipedia.org/wiki/Permuted_congruential_generator</li> </ul> <h5 id="uniform-random-float">Uniform Random Float</h5> <ul> <li>http://mumble.net/~campbell/2014/04/28/uniform-random-float</li> <li>https://mumble.net/~campbell/2014/04/28/random_real.c</li> </ul> <h2 id="language">Language</h2> <h5 id="lexer-and-parser">Lexer and Parser</h5> <ul> <li>Compiler Tutorial : https://github.com/DoctorWkt/acwj <ul> <li>GNU General Public License v3.0</li> </ul> </li> </ul> <h5 id="parsing-floating-point-value">Parsing floating-point value</h5> <ul> <li> <p><a href="https://github.com/fastfloat/fast_float">fast_float by Daniel Lemire</a> by MIT License.</p> <ul> <li> <p>Daniel Lemire, <a href="https://arxiv.org/abs/2101.11408">Number Parsing at a Gigabyte per Second</a>, Software: Practice and Experience 51 (8), 2021.</p> </li> <li> <p>Noble Mushtak, Daniel Lemire, <a href="https://arxiv.org/abs/2212.06644">Fast Number Parsing Without Fallback</a>, Software: Practice and Experience 53 (7), 2023.</p> </li> </ul> </li> <li> <p>https://www.exploringbinary.com/how-strtod-works-and-sometimes-doesnt/</p> <p>How strtod() WOrks (and Sometimes Doesn’t)</p> <p>This is the work of extensive exploration on strtod() by Rick Regan.</p> </li> <li> <p>Emscripten : https://chromium.googlesource.com/external/github.com/kripken/emscripten/+/refs/tags/1.2.9/system/lib/libc/stdlib/strtod.c</p> <ul> <li>MIT license</li> <li>University of Illinois/NCSA Open Source License</li> </ul> </li> </ul> <h2 id="opengl">OpenGL</h2> <h4 id="opengl-loader">OpenGL Loader</h4> <ul> <li>glad : https://github.com/Dav1dde/glad <ul> <li>glad : MIT License</li> <li>Khronos Specification : Apache License Version 2.0</li> <li>EGL Speification and Various headers</li> </ul> </li> </ul> <h2 id="vulkan">Vulkan</h2> <h3 id="vulkan-presentation-system">Vulkan Presentation System</h3> <ul> <li>krOoze’s Hello Triangle Tutorial : https://github.com/krOoze/Hello_Triangle <ul> <li>Unlicense (Permissions : Private use/Commercial Use/Modification/Distribution)</li> </ul> </li> </ul> <h3 id="vulkan-loader">Vulkan Loader</h3> <ul> <li>volk : https://github.com/zeux/volk <ul> <li>MIT License</li> </ul> </li> </ul> <h2 id="file-formats">File Formats</h2> <h3 id="png">PNG</h3> <ul> <li>PNG Specification New : https://www.w3.org/TR/png-3/</li> <li>PNG Specification Old : http://libpng.org/pub/png/spec/1.2/PNG-Contents.html</li> <li>ZLIB Compressed Data Format Specification 3.3 : https://www.rfc-editor.org/rfc/rfc1950</li> <li>Deflate Compressed Data Format Specification 1.3 : https://www.rfc-editor.org/rfc/rfc1951</li> <li>PNG Parser : stb_image.h from https://github.com/nothings/stb of Sean Barrett <ul> <li>Public Domain or MIT open source license</li> </ul> </li> <li>Zip Files: History, Explanation and Implementation by https://www.hanshq.net/zip.html#huffman</li> <li>ZLIB Deflate Algorithm Explanation : https://www.zlib.net/feldspar.html</li> <li>PNG Parser Review : https://handmade.network/forums/articles/t/2363-implementing_a_basic_png_reader_the_handmade_way</li> <li>A. Moffat and A. Turpin, “On the implementation of minimum redundancy prefix codes,” in IEEE Transactions on Communications, vol. 45, no. 10, pp. 1200-1207, Oct. 1997, doi: 10.1109/26.634683.</li> <li>Handmade Hero PNG Decoder Parts: https://handmadehero.org/</li> </ul> <h3 id="font">Font</h3> <ul> <li>OpenType Specification Version 1.9 : https://learn.microsoft.com/en-us/typography/opentype/spec/</li> <li>TrueType Reference Manual : https://developer.apple.com/fonts/TrueType-Reference-Manual/</li> <li>Handmade Hero Fonts Parts: https://handmadehero.org/</li> <li>Handmade Network Tutorial : <ul> <li>https://handmade.network/forums/articles/t/7330-implementing_a_font_reader_and_rasterizer_from_scratch%252C_part_1__ttf_font_reader.</li> <li>https://handmade.network/forums/wip/t/7610-reading_ttf_files_and_rasterizing_them_using_a_handmade_approach%252C_part_2__rasterization</li> </ul> </li> <li>Fonts and Layout for Global Scripts by Simon Coznes : https://simoncozens.github.io/fonts-and-layout// <ul> <li>How OpenType Works : https://simoncozens.github.io/fonts-and-layout/opentype.html</li> <li>Introduction to OpenType Programming : https://simoncozens.github.io/fonts-and-layout/features.html</li> </ul> </li> <li>FreeType : https://freetype.org/index.html <ul> <li>FreeType License (FTL) : https://gitlab.freedesktop.org/freetype/freetype/-/blob/master/docs/FTL.TXT</li> <li>GPLv2 License : https://gitlab.freedesktop.org/freetype/freetype/-/blob/master/docs/GPLv2.TXT</li> </ul> </li> <li>stb_truetype.h : https://github.com/nothings/stb/blob/master/stb_truetype.h</li> <li>How the stb_truetype Anti-Aliased Software Rasterizer v2 Works : https://www.nothings.org/gamedev/rasterize/</li> <li>Texts Rasterization Exposures : https://web.archive.org/web/20190329134110/http://www.antigrain.com/research/font_rasterization/</li> <li>Creating a Pixel Font from scratch by Cal Henderson : https://www.iamcal.com/misc/fonts/pixfonttut/</li> <li>Adaptive Subdivision of Bezier Curves : https://web.archive.org/web/20190329074058/http://antigrain.com:80/research/adaptive_bezier/index.html</li> </ul> <h3 id="bmp">BMP</h3> <ul> <li>BMP file format from Wikipedia : https://en.wikipedia.org/wiki/BMP_file_format</li> <li>MSND Device Independent Bitmap (DIB) : https://learn.microsoft.com/en-us/windows/win32/gdi/device-independent-bitmaps</li> <li>MSDN BITMAPINFOHEADER structure : https://learn.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-bitmapinfoheader?redirectedfrom=MSDN</li> <li>MSDN Windows Meta File Format Specification : https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/4813e7fd-52d0-4f42-965f-228c8b7488d2</li> <li>MSDN DeviceIndependentBitmap (DIB) format : https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/7376542a-cce9-4625-8ead-585e9538f9f1</li> <li>MSND BitCount Enumeration : https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/792153f4-1e99-4ec8-93cf-d171a5f33903</li> <li>Type of Bitmaps : https://learn.microsoft.com/en-us/windows/win32/gdiplus/-gdiplus-types-of-bitmaps-about</li> </ul> <h3 id="obj">OBJ</h3> <ul> <li>https://aras-p.info/blog/2022/05/12/speeding-up-blender-obj-import/</li> <li>https://aras-p.info/blog/2022/05/14/comparing-obj-parse-libraries/</li> <li>https://github.com/guybrush77/rapidobj <ul> <li>MIT license</li> </ul> </li> <li>https://github.com/blender/blender</li> </ul> <h2 id="gui">GUI</h2> <h3 id="imgui">IMGUI</h3> <ul> <li>Immediate-Mode Graphics User Interfaces by Casey Muratori : https://caseymuratori.com/blog_0001</li> <li>UI rendering using Primitive Buffers : https://ruby0x1.github.io/machinery_blog_archive/post/ui-rendering-using-primitive-buffers/</li> <li>One Draw Call UI by Our Machinery : https://ruby0x1.github.io/machinery_blog_archive/post/one-draw-call-ui/index.html (The engine shutdowns. And people have archived their resources).</li> <li>imgui : https://github.com/ocornut/imgui/tree/master <ul> <li>MIT License</li> </ul> </li> <li> <p>Immediate Mode Graphical User Interfaces by Rickard Gustafsson and Johannes Algelind : https://www.cse.chalmers.se/edu/year/2011/course/TDA361/Advanced%20Computer%20Graphics/IMGUI.pdf</p> </li> <li>Writing tools faster by Niklas Gray (Our Machinery) in GDC 2020 presentation.</li> </ul> <h2 id="hash">Hash</h2> <h3 id="crc">CRC</h3> <ul> <li>CRC Implementation : https://en.wikipedia.org/wiki/Computation_of_cyclic_redundancy_checks</li> <li>Sunshine’s Homepage : http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html</li> <li>CRC RevEng : https://reveng.sourceforge.io/crc-catalogue/</li> <li>CRC-64/ECMA-182 : https://www.ecma-international.org/wp-content/uploads/ECMA-182_1st_edition_december_1992.pdf</li> <li>CRC-32/CKSUM : https://pubs.opengroup.org/onlinepubs/7990989775/xcu/cksum.html</li> <li>CRC-16/IBM-3740</li> <li>CRC-8/GSM-A</li> </ul> <h3 id="martin-leitner-ankerl-hash">Martin Leitner-Ankerl Hash</h3> <ul> <li>https://github.com/martinus/unordered_dense/blob/main/include/ankerl/unordered_dense.h <ul> <li>MIT License</li> <li>It’s a stripped-down implementation of wyhash : https://github.com/wangyi-fudan/wyhash</li> </ul> </li> </ul> <h3 id="wyhash">wyhash</h3> <ul> <li>https://github.com/wangyi-fudan/wyhash <ul> <li>Unlicense</li> </ul> </li> </ul> <h2 id="spline">Spline</h2> <ul> <li>A Blossoming Development of Splines by Stephen Mann (2006).</li> </ul> <h2 id="rendering">Rendering</h2> <h3 id="scanline-fill">Scanline Fill</h3> <ul> <li>How the stb_truetype Anti-Aliasdd Software Rasterizer Works : https://www.nothings.org/gamedev/rasterize/</li> <li>non-zero fill algorithm on wikipedia. : https://en.wikipedia.org/wiki/Nonzero-rule</li> <li>Chris Hecker series on perspective texture mapping : https://chrishecker.com/Miscellaneous_Technical_Articles</li> </ul> <h3 id="triangle-rasterization">Triangle Rasterization</h3> <ul> <li>Triangle rasterization in practice by Fabian “ryg” Giesen : https://fgiesen.wordpress.com/2013/02/08/triangle-rasterization-in-practice/</li> <li>Optimizing the basic rasterizer by Fabian “ryg” Giesen : https://fgiesen.wordpress.com/2013/02/10/optimizing-the-basic-rasterizer/</li> </ul> <h3 id="terrain">Terrain</h3> <ul> <li>Tessellated Terrain Rendering with Dynamic LOD by victorbush : https://victorbush.com/2015/01/tessellated-terrain/</li> </ul> <h2 id="model-data">Model Data</h2> <ul> <li>Models downloaded from Morgan McGuire’s <a href="https://casual-effects.com/data">Computer Graphics Archive</a> <ul> <li>Sibenik Cathedral</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="ChLib"/><category term="ChLib"/><summary type="html"><![CDATA[Full references for my ChLib]]></summary></entry></feed>